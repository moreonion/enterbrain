<?php

/**
 * @file
 * The main module file containing hook implementations and the cron job.
 */

use \Drupal\enterbrain\Api;

require_once 'integrations/manual_direct_debit.php';
require_once 'integrations/payone_payment.php';

/**
 * Implements hook_menu().
 */
function enterbrain_menu() {
  $items['admin/config/services/enterbrain'] = [
    'title' => 'Enterbrain settings',
    'description' => 'API access and default project.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['enterbrain_config_form'],
    'file' => 'enterbrain.admin.inc',
    'access arguments' => ['administer enterbrain settings'],
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['enterbrain/check-iban/%'] = [
    'title' => 'Submit an IBAN for checking',
    'description' => 'The IBAN is checked against the enterbrain API and if valid returns the accompanying BIC.',
    'page callback' => 'enterbrain_check_iban',
    'page arguments' => [2],
    'access callback' => 'enterbrain_form_api_access',
    'delivery callback' => 'little_helpers_deliver_json',
    'type' => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * Implements hook_payment_status_change().
 *
 * This callback triggers the calls to NeuerFoerderer2.
 */
function enterbrain_payment_status_change(Payment $payment, PaymentStatusItem $previous_status_item) {
  if (!$payment->pid) {
    return;
  }
  if (!payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_SUCCESS)) {
    return;
  }
  if (payment_status_is_or_has_ancestor($previous_status_item->status, PAYMENT_STATUS_SUCCESS)) {
    return;
  }

  $queue = \DrupalQueue::get('enterbrain_payment', TRUE);
  $queue->createItem($payment->pid);
}

/**
 * Implements hook_cronapi().
 *
 * Execute our send queues.
 */
function enterbrain_cronapi() {
  $items['enterbrain_send_payments'] = array(
    'title' => t('EnterBrain payment data.'),
    'tags' => array('enterbrain'),
  );
  return $items;
}

/**
 * Cron-callback: Send payment events.
 *
 * Much of this is copied from @see drupal_cron_run() .
 */
function enterbrain_send_payments() {
  $api = Api::fromConfig();

  $callback = 'enterbrain_send_payment';
  $end = time() + variable_get('enterbrain_api_send_time', 30);
  $queue = DrupalQueue::get('enterbrain_payment');
  while (time() < $end && ($item = $queue->claimItem())) {
    try {
      $pid = $item->data;
      $payments = entity_load('payment', [$pid], [], TRUE);
      $payment = reset($payments);
      $api->sendPayment($payment);
      $queue->deleteItem($item);
    }
    catch (Exception $e) {
      // In case of exception log it and leave the item in the queue
      // to be processed again later.
      watchdog_exception('enterbrain', $e);
    }
  }
}

/**
 * Access callback: Allow up to 60 requests per hour per IP.
 *
 * @return bool
 *   TRUE if access is granted otherwise false.
 */
function enterbrain_form_api_access() {
  $event = 'enterbrain_form_api';
  if (flood_is_allowed('enterbrain_form_api', 60, 3600)) {
    flood_register_event('enterbrain_form_api', 3600);
    return TRUE;
  }
  return FALSE;
}

/**
 * Page callback: Checks an IBAN against the enterbrain API.
 *
 * @param string $iban
 *   The string to check.
 *
 * @return array
 *   API response includes the following keys:
 *   - valid (TRUE|FALSE): Whether this is a valid key.
 *   - bic (only if available): The BIC code for this IBAN.
 *   - error (if not valid): A reason for why this IBAN is invalid.
 *
 * @see enterbrain_menu()
 */
function enterbrain_check_iban($iban) {
  try {
    $api = Api::fromConfig();
    return $api->checkIBAN($iban);
  }
  catch (\SoapFault $e) {
    watchdog_exception('enterbrain', $e);
    return 502;
  }
}
